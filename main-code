#define BLYNK_TEMPLATE_ID "TMPL6QImNv-U7"
#define BLYNK_TEMPLATE_NAME "test"
#define BLYNK_AUTH_TOKEN "GkqyuFhAIDeuVGWONGx3OnUVPd2eUAW6"

#include <math.h>
#include <time.h>
#include <ESP32Servo.h>
#include <BlynkSimpleEsp32.h>
#include <WiFi.h>
#include <WiFiClient.h>


#define BLYNK_PRINT Serial

#define SERVOb_PIN 18
#define SERVOg_PIN 12
#define SERVOarm_PIN 14
#define SERVOh_PIN 5


#define BUTTON_PIN 19

Servo myServob;
Servo myServoarm;
Servo myServog;
Servo myServoh;

//char ssid[]="Buffalo-2G-OE10";
//char pass[]="46tkdugy8r54n";

char ssid[]="takumi-kentaro";
char pass[]="k0Ken-11235";


float sliderValueBase=0;
int sliderValueArm=0;
int sliderValueG=0;
int sliderValueG2=0;
int sliderValueH=0;

enum State
{
    set,
    touch0,
    touch1,
    touch2,
    auto1,
    auto2,
    auto3,
    auto4,
    reset1,
    //reset2,
    //back 
    
};

int state;
//unsigned long time;
float touchtime = 20;
unsigned long rot0time = 0;
unsigned long rot1time = 0;
unsigned long rot2time = 0;
unsigned long rot3time = 0;
unsigned long beforetime = 0;

int count = 0;

void Nowstate(){
   Serial.println(String(count));
    Serial.println("state is "+String(state));
    Serial.println("rot1time is "+String(rot1time));
    Serial.println("rot2time is "+String(rot2time));
    Serial.println("rot3time is "+String(rot3time));
    
}

void setup() {
  Serial.begin(115200);
  
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  Serial.println("connected");
  pinMode(BUTTON_PIN,INPUT);

  myServob.attach(SERVOb_PIN);
  myServoarm.attach(SERVOarm_PIN);
  myServog.attach(SERVOg_PIN);
  myServoh.attach(SERVOh_PIN);

  state = set;
  Nowstate();
}




void loop(){
  beforetime = millis();
  Blynk.run();
  
  count = count +1 ;
  if(count % 10000 == 0){
    Serial.println(String(count));
    Serial.println("state is "+String(state));
    Serial.println("rot1time is "+String(rot1time));
    Serial.println("rot2time is "+String(rot2time));
    Serial.println("rot3time is "+String(rot3time));
    
  }

   if(state == set){
    myServob.write(0);
    //rot1time += 1;
   }
  
  //bサーボを進める
  if(state == touch0){
    if(sliderValueBase <= 180){
    sliderValueBase = sliderValueBase + 0.01;
    myServob.write(sliderValueBase);
    //rot1time += 1;
   }
  }
  else if(state == touch0 && rot1time >= 30000){//groundサーボを止める
    myServob.write(180);
  }

  //groundサーボを進める
  if(state == touch1 && rot1time <= 30000){
    if(sliderValueG == 1){
    myServog.write(70);//訂正済み
    rot1time += 1;
   }
  }
  else if(state == touch1 && rot1time >= 30000){//groundサーボを止める
    myServog.write(90);
  }

   //armサーボを進める
  if(state == touch2 && rot2time <= 30000){
    if(sliderValueArm == 1){
    myServoarm.write(110);
    rot2time += 1;
   }
  }
  else if(state == touch2 &&rot2time >= 30000){//armサーボを止める
    myServoarm.write(90);
  }

  //autoモードでサーボgを回転
  if(state == auto1){
    myServog.write(110);
    rot1time += 1;
    
    if(digitalRead(BUTTON_PIN) == HIGH){
      
      state = auto2;
      Nowstate();
      //rot3time = 0;
    }
     
  }
  //サーボhを自動回転
  if(state == auto2){
    //if(rot3time <= 5000){
      myServoh.write(180);
      //delay(1000);
      //rot3time += 1;
    //}
  
    //else{
      state = auto3;
      Nowstate();
      //beforetime = millis();
    

  }
  
  //サーボbを自動回転
  if(state == auto3){
    //if(rot0time >= 0){
      myServob.write(0);
      //delay(1000);
      //rot0time -= 1;
    //}
  
    //else{
      state = auto4;
      Nowstate();
      //beforetime = millis();
    //}

  //サーボhを自動回転させて離す
  if(state == auto4){
    if(rot3time >= 0){
      myServoh.write(0);
      //delay(1000);
      state = reset1;
      Nowstate();
    }
  
    }
  }
  if(state == reset1){
    if(rot1time > 1){
      myServoh.write(70);
      //delay(1000);
      rot1time = rot1time-1;
    }

    if(rot2time > 1){
      myServoh.write(70);
      //delay(1000);
      rot2time = rot2time-1;
    }

    if(rot1time < 10 && rot2time < 10){
      state = set;
      Nowstate();
    }
  
  }

  
}


BLYNK_WRITE(V0) {//スタートボタンを押すとグラウンドの方が回転
  sliderValueBase = param.asInt(); 
  Serial.println("v0 PUSHED");
  if(sliderValueBase == 0){ //リセットボタン
    state = set;
    Nowstate();
    //rot1time = 0;
  }
  
  if(state == set && sliderValueBase == 1){

      state = touch0;
      Nowstate();
    }
  }

BLYNK_WRITE(V1) {//ボタンを押すとグラウンドの方が回転
  sliderValueG = param.asInt(); 
  Serial.println("v0 PUSHED");
  if(sliderValueG == 0){ //リセットボタン
    state = set;
    Nowstate();
    rot1time = 0;
  }
  
  if(state == touch0 && sliderValueG == 1){

      state = touch1;
      Nowstate();
    }
  }


BLYNK_WRITE(V2) {
  sliderValueArm = param.asInt(); 
  Serial.println("v1 PUSHED");

  
  if(sliderValueArm == 0){ //リセットボタン
    state = set;
    Nowstate();
    rot2time = 0;
  }

  if(state == touch1 && sliderValueArm == 1){
    state = touch2;
    Nowstate();

    }
  }

  BLYNK_WRITE(V3) {
    sliderValueG2 = param.asInt(); 
    Serial.println("v2 PUSHED");
    if(state == touch2 && sliderValueG2 == 1){
      state = auto1;
      Nowstate();
  
    }
}

