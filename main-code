#define BLYNK_TEMPLATE_ID "TMPL6QImNv-U7"
#define BLYNK_TEMPLATE_NAME "test"
#define BLYNK_AUTH_TOKEN "GkqyuFhAIDeuVGWONGx3OnUVPd2eUAW6"

#include <math.h>
#include <time.h>
#include <ESP32Servo.h>
#include <BlynkSimpleEsp32.h>
#include <WiFi.h>
#include <WiFiClient.h>


#define BLYNK_PRINT Serial

#define SERVOb_PIN 18
#define SERVOg_PIN 12
#define SERVOarm_PIN 14
#define SERVOh_PIN 5


#define BUTTON_PIN 19

Servo myServob;
Servo myServoarm;
Servo myServog;
Servo myServoh;

char ssid[]="Buffalo-2G-OE10";
char pass[]="46tkdugy8r54n";

float sliderValueB=0;
int sliderValueArm=0;
int sliderValueG=0;
int sliderValueG2=0;
int sliderValueH=0;

enum State
{
    set,
    touch0,
    touch1,
    touch2,
    auto1,
    auto2,
    auto3,
    auto4,
    reset1,
    //reset2,
    //back 
    
};

int state;
//unsigned long time;
float touchtime = 20;
float rot0 = 0;
float rot1time = 0;
bool rot1Max = false;
bool rot1min = false;
bool rot2Max = false;
bool rot2min = false;
unsigned long rot2time = 0;
unsigned long rot3time = 0;
unsigned long beforetime = 0;

int count = 0;

void Nowstate(){
   Serial.println(String(count));
    Serial.println("state is "+String(state));
    Serial.println("rot1time is "+String(rot1time));
    Serial.println("rot2time is "+String(rot2time));
    Serial.println("rot3time is "+String(rot3time));
    rot0 = 0;
    rot1time = 0;
    rot2time = 0;
    rot3time = 0;
    
}

void setup() {
  Serial.begin(115200);
  
  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  Serial.println("connected");
  pinMode(BUTTON_PIN,INPUT);

  myServob.attach(SERVOb_PIN);
  myServoarm.attach(SERVOarm_PIN);
  myServog.attach(SERVOg_PIN);
  myServoh.attach(SERVOh_PIN);

  state = set;
  Nowstate();
}


void Touch0(){
   if(sliderValueB == 1){
    rot0 = rot0 + 0.01;
    myServob.write(rot0);
    //rot0 += 1;
   }
   if(sliderValueB == -1){
    rot0 = rot0 - 0.01;
    myServob.write(rot0);
    //rot0 -= 1;
   }

  if( rot0 <= 1){//bサーボを止める
    myServob.write(1);
    rot0 = 1;
  }
  if( rot0 >= 180){//bサーボを止める
    myServob.write(180);
    rot0 = 180;
  }
}

void Touch1(){
  if(rot1time >= 50000){
    rot1time = 50000;
    rot1Max = true;
  }
  else if(rot1time <= 0){
    rot1time = 0;
    rot1min = true;
  }
  else{
    rot1Max = false;
    rot1min = false;

  }

  if(rot1Max == false  && rot1min == false){
    
    if(sliderValueG == 1){
      myServog.write(70);//訂正済み前
      rot1time += 1;
    }
    if(sliderValueG == -1){
      myServog.write(110);//訂正済み後ろ
      rot1time -= 1;
    }
  }
  if(rot1Max = true){
    if(sliderValueG == 1){
    myServog.write(70);//訂正済み
    rot1time += 1;
    }
  
    else{
       myServog.write(90);//訂正済み
    }

  }
   if(rot1min = true){
    if(sliderValueG == -1){
    myServog.write(110);//訂正済み
    rot1time -= 1;
    }
  
    else{
       myServog.write(90);//訂正済み
    }

  }
  
}

void Touch2(){
  if(rot2time >= 50000){
    rot2time = 50000;
    rot2Max = true;
  }
  else if(rot2time <= 0){
    rot2time = 0;
    rot2min = true;
  }
  else{
    rot2Max = false;
    rot2min = false;

  }

  if(rot2Max == false  && rot2min == false){
    
    if(sliderValueArm == 1){
      myServoarm.write(70);//訂正済み前
      rot2time += 1;
    }
    if(sliderValueArm == -1){
      myServoarm.write(110);//訂正済み後ろ
      rot1time -= 1;
    }
  }
  if(rot2Max = true){
    if(sliderValueArm == 1){
    myServoarm.write(70);//訂正済み
    rot2time += 1;
    }
  
    else{
       myServoarm.write(90);//訂正済み
    }

  }
   if(rot1min = true){
    if(sliderValueG == -1){
    myServoarm.write(110);//訂正済み
    rot1time -= 1;
    }
  
    else{
       myServoarm.write(90);//訂正済み
    }

  }
  
  /*
  if(rot2time <= 30000){
    if(sliderValueArm == 1){
    myServoarm.write(110);
    rot2time += 1;
   }
  }
  else if(rot2time >= 30000){//armサーボを止める
    myServoarm.write(90);
  }*/

}

void loop(){
  beforetime = millis();
  Blynk.run();



  count = count +1 ;
  if(count % 10000 == 0){
    Serial.println(String(count));
    Serial.println("state is "+String(state));
    Serial.println("rot0 is "+String(rot0));
    Serial.println("rot1time is "+String(rot1time));
    Serial.println("rot2time is "+String(rot2time));
    Serial.println("rot3time is "+String(rot3time));
    
  }

 
  
  //bサーボを進める
  if(state == touch0){
    Touch0();
  }


  //groundサーボを進める
  if(state == touch1){
    Touch1();
  }


   //armサーボを進める
   if(state == touch2){
    Touch2();
   }


  //autoモードでサーボgを回転
  if(state == auto1){
    myServog.write(110);
    rot1time += 1;
    
    if(digitalRead(BUTTON_PIN) == HIGH){
      
      state = auto2;
      Nowstate();
      //rot3time = 0;
    }
     
  }
  //サーボhを自動回転
  if(state == auto2){
      myServoh.write(180);
      state = auto3;
      Nowstate();

  }
  
  //サーボbを自動回転
  if(state == auto3){
      myServob.write(0);
  
      state = auto4;
      Nowstate();

  //サーボhを自動回転させて離す
  if(state == auto4){
    if(rot3time >= 0){
      myServoh.write(0);
      state = reset1;
      Nowstate();
    }
  
    }
  }
  if(state == reset1){
    if(rot1time > 1){
      myServoh.write(70);
      rot1time = rot1time-1;
    }

    if(rot2time > 1){
      myServoh.write(70);
      rot2time = rot2time-1;
    }

    if(rot1time < 10 && rot2time < 10){
      state = set;
      Nowstate();
    }
  
  }

  
}


BLYNK_WRITE(V1) {//スタートボタンを押すとグラウンドの方が回転
  sliderValueB = param.asInt(); 
  Serial.println("V0 PUSHED");

  if(state == set && sliderValueB == 1){
      state = touch0;
      Nowstate();
    }
  }

BLYNK_WRITE(V2) {//ボタンを押すとグラウンドの方が回転
  sliderValueG = param.asInt(); 
  Serial.println("v0 PUSHED");
  /*if(sliderValueG == 0){ //リセットボタン
    state = set;
    Nowstate();
    rot1time = 0;
  }*/
  
  if(state == touch0 && (sliderValueG == 1)){

      state = touch1;
      Nowstate();
    }
  }


BLYNK_WRITE(V3) {
  sliderValueArm = param.asInt(); 
  Serial.println("v1 PUSHED");

  
  if(sliderValueArm == 0){ //リセットボタン
    state = set;
    Nowstate();
    rot2time = 0;
  }

  if(state == touch1 && sliderValueArm == 1){
    state = touch2;
    Nowstate();

    }
  }

  BLYNK_WRITE(V0) {
    sliderValueG2 = param.asInt(); 
    Serial.println("v2 PUSHED");
    if(state == touch2 && sliderValueG2 == 1){
      state = auto1;
      Nowstate();
  
    }

    if(sliderValueG2 == 0){ //リセットボタン
    state = set;
    Nowstate();
  }
}

